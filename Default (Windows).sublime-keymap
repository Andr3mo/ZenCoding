[
{
  "keys" : ["ctrl+alt+shift+h"],
  "command" : "set_html_syntax_and_insert_skel",
  "args": {"doctype":"5"}
},
{
    "args": {}, 
    "command": "zen_as_you_type", 
    "context": [
      {
        "key": "selector",
        "match_all": true, 
        "operand": "text.html, source.css, text.xml", 
        "operator": "equal"
      }
    ], 
    "keys": [
      "ctrl+alt+enter"
    ]
},
{
"context": [
    {
      "key": "selector", 
      "match_all": true, 
      "operand": "text.html, text.xml", 
      "operator": "equal"
    }, 
    {
      "key": "selection_empty", 
      "match_all": true, 
      "operand": true, 
      "operator": "equal"
    }
    ], 
    "keys": [
      "shift+ctrl+j"
    ],
    "args": {
      "action": "split_join_tag", 
      "profile_name": null
    }, 
    "command": "run_zen_action" },

  {
    "keys": [
      "ctrl+alt+comma"
    ], 
    "args": {
      "action": "decrement_number_by_01"
    }, 
    "command": "run_zen_action", 
    "context": [{
      "operand": "source.css meta.property-list.css meta.property-value.css constant.numeric.css", 
      "operator": "equal", 
      "match_all": true, 
      "key": "selector"
    }]
  }, 
  {
    "keys": [
      "ctrl+comma"
    ], 
    "args": {
      "action": "decrement_number_by_1"
    }, 
    "command": "run_zen_action", 
    "context": [{
      "operand": "source.css meta.property-list.css meta.property-value.css constant.numeric.css", 
      "operator": "equal", 
      "match_all": true, 
      "key": "selector"
    }]
  }, 
  {
    "keys": [
      "ctrl+shift+comma"
    ], 
    "args": {
      "action": "decrement_number_by_10"
    }, 
    "command": "run_zen_action", 
    "context": [{
      "operand": "source.css meta.property-list.css meta.property-value.css constant.numeric.css", 
      "operator": "equal", 
      "match_all": true, 
      "key": "selector"
    }]
  }, 
  {
    "keys": [
      "TODO"
    ], 
    "doc": "Encodes/decodes image under cursor to/from base64\n\n@since: 0.65", 
    "args": {
      "action": "encode_decode_base64"
    }, 
    "command": "run_zen_action", 
    "context": [{
      "operand": "text.html, source.css, text.xml", 
      "operator": "equal", 
      "match_all": true, 
      "key": "selector"
    }]
  }, 
  {
    "keys": [
      "TODO"
    ], 
    "doc": "Evaluates simple math expresison under caret\n@param editor: ZenEditor", 
    "args": {
      "action": "evaluate_math_expression"
    }, 
    "command": "run_zen_action", 
    "context": [{
      "operand": "text.html, source.css, text.xml", 
      "operator": "equal", 
      "match_all": true, 
      "key": "selector"
    }]
  }, 
  {
    "keys": [
      "tab"
    ], 
    "doc": "Find from current caret position and expand abbreviation in editor\n\n\n@param syntax: Syntax type (html, css, etc.)\n@type syntax: str\n@param profile_name: Output profile name (html, xml, xhtml)\n@type profile_name: str\n@return: True if abbreviation was expanded successfully", 
   
    "args": {
      "action": "expand_abbreviation", 
      "profile_name": null, 
      "syntax": null
    }, 
    "command": "run_zen_action", 
    "context": [
      {
        "key": "selector", 
        "match_all": true, 
        "operand": "text.xml - meta.tag, text.html - source - meta.tag, punctuation.definition.tag.begin, meta.scope.between-tag-pair.html, source.css, source.js", 
        "operator": "equal"
      },
      {
        "key": "selection_empty", 
        "match_all": true, 
        "operand": true, 
        "operator": "equal"
      },
      {
         "key": "is_zen",
         "operand": true,
         "operator": "equal"
       },
      {
        "key": "num_selections",
        "operand": 1, 
        "operator": "equal"
      } 
    ]
}, 
//{
//    "keys": [
//      ""
//    ], 
//    "doc": "A special version of <code>expandAbbreviation</code> function: if it can't\nfind abbreviation, it will place Tab character at caret position\n\n\n@param syntax: Syntax type (html, css, etc.)\n@type syntax: str\n@param profile_name: Output profile name (html, xml, xhtml)\n@type profile_name: str", 
//    "args": {
//      "action": "expand_abbreviation_with_tab", 
//      "profile_name": null, 
//      "syntax": null
//    }, 
//    "command": "run_zen_action", 
//    "context": [{
//      "operand": "text.html, source.css, text.xml", 
//      "operator": "equal", 
//      "match_all": true, 
//      "key": "selector"
//    }]
//  }, 
  {
    "keys": [
      "ctrl+alt+n"
    ], 
    "doc": "Moves caret to matching opening or closing tag\n", 
    "args": {
      "action": "go_to_matching_pair"
    }, 
    "command": "run_zen_action", 
    "context": [{
      "operand": "text.html, source.css", 
      "operator": "equal", 
      "match_all": true, 
      "key": "selector"
    }]
  }, 

//  {
//    "keys": [
//      "ctrl+alt+shift+equals"
//    ], 
//    "doc": "Extract number from current caret position of the <code>editor</code> and\nincrement it by <code>step</code>\n@type editor: ZenCoding\n@param step: Increment step (may be negative)\n@type step: int", 
//    "args": {
//      "action": "increment_number", 
//      "step": 1
//    }, 
//    "command": "run_zen_action", 
//    "context": [{
//      "operand": "source.css meta.property-list.css meta.property-value.css constant.numeric.css", 
//      "operator": "equal", 
//      "match_all": true, 
//      "key": "selector"
//    }]
//  }, 
  {
    "keys": [
      "ctrl+alt+period"
    ], 
    "args": {
      // "Increments number by 0.1"
      "action": "increment_number_by_01"
    }, 
    "command": "run_zen_action", 
    "context": [{
      "operand": "source.css meta.property-list.css meta.property-value.css constant.numeric.css", 
      "operator": "equal", 
      "match_all": true, 
      "key": "selector"
    }]
  }, 
  {
    "keys": [
      "ctrl+period"
    ], 
    "args": {
      "action": "increment_number_by_1"
    }, 
    "command": "run_zen_action", 
    "context": [{
      "operand": "source.css meta.property-list.css meta.property-value.css constant.numeric.css", 
      "operator": "equal", 
      "match_all": true, 
      "key": "selector"
    }]
  }, 
  {
    "keys": [
      "ctrl+shift+period"
    ], 
    "args": {
      "action": "increment_number_by_10"
    }, 
    "command": "run_zen_action", 
    "context": [{
      "operand": "text.html, source.css, text.xml", 
      "operator": "equal", 
      "match_all": true, 
      "key": "selector"
    }]
  }, 
  {
    "keys": [
      "TODO"
    ], 
    "doc": "Inserts newline character with proper indentation\n\n\n@param mode: Syntax mode (only 'html' is implemented)\n@type mode: str", 
    "args": {
      "action": "insert_formatted_newline", 
      "mode": "html"
    }, 
    "command": "run_zen_action", 
    "context": [{
      "operand": "text.html", 
      "operator": "equal", 
      "match_all": true, 
      "key": "selector"
    }]
  }, 
  {
    "keys": [
      "ctrl+shift+n"
    ], 
    "doc": "Find and select HTML tag pair\n\n\n@param direction: Direction of pair matching: 'in' or 'out'. \n@type direction: str ", 
    "args": {
      "action": "match_pair", 
      "direction": "out", 
      "syntax": null
    }, 
    "command": "run_zen_action", 
    "context": [{
      "operand": "text.html, source.css, text.xml", 
      "operator": "equal", 
      "match_all": true, 
      "key": "selector"
    }]
  }, 
  {
    "keys": [
      "ctrl+shift+t"
    ], 
    "args": {
      "action": "match_pair_inward"
    }, 
    "command": "run_zen_action", 
    "context": [{
      "operand": "text.html, source.css, text.xml", 
      "operator": "equal", 
      "match_all": true, 
      "key": "selector"
    }]
  }, 
  {
    "keys": [
      "TODO"
    ], 
    "args": {
      "action": "match_pair_outward"
    }, 
    "command": "run_zen_action", 
    "context": [{
      "operand": "text.html, source.css, text.xml", 
      "operator": "equal", 
      "match_all": true, 
      "key": "selector"
    }]
  }, 
  {
    "keys": [
      "TODO"
    ], 
    "doc": "Merge lines spanned by user selection. If there's no selection, tries to find\nmatching tags and use them as selection\n", 
    "args": {
      "action": "merge_lines"
    }, 
    "command": "run_zen_action", 
    "context": [{
      "operand": "text.html, source.css, text.xml", 
      "operator": "equal", 
      "match_all": true, 
      "key": "selector"
    }]
  }, 
  {
    "keys": [
      "ctrl+period"
    ], 
    "doc": "Move caret to next edit point\n", 
    "args": {
      "action": "next_edit_point"
    }, 
    "command": "run_zen_action", 
    "context": [{
      "operand": "text.html, source.css, text.xml", 
      "operator": "equal", 
      "match_all": true, 
      "key": "selector"
    }]
  }, 
  {
    "keys": [
      "ctrl+comma"
    ], 
    "doc": "Move caret to previous edit point\n", 
    "args": {
      "action": "prev_edit_point"
    }, 
    "command": "run_zen_action", 
    "context": [{
      "operand": "text.html, source.css, text.xml", 
      "operator": "equal", 
      "match_all": true, 
      "key": "selector"
    }]
  }, 
  {
    "keys": [
      "TODO"
    ], 
    "doc": "Reflect CSS value: takes rule's value under caret and pastes it for the same \nrules with vendor prefixes\n@param editor: ZenEditor", 
    "args": {
      "action": "reflect_css_value"
    }, 
    "command": "run_zen_action", 
    "context": [{
      "operand": "text.html, source.css, text.xml", 
      "operator": "equal", 
      "match_al.l": true, 
      "key": "selector"
    }]
  }, 
  {
    "keys": [
      "TODO"
    ], 
    "doc": "Gracefully removes tag under cursor", 
    "args": {
      "action": "remove_tag"
    }, 
    "command": "run_zen_action", 
    "context": [{
      "operand": "text.html, source.css, text.xml", 
      "operator": "equal", 
      "match_all": true, 
      "key": "selector"
    }]
  }, 
  {
    "keys": [
      "TODO"
    ], 
    "doc": "Select line under cursor\n", 
    "args": {
      "action": "select_line"
    }, 
    "command": "run_zen_action", 
    "context": [{
      "operand": "text.html, source.css, text.xml", 
      "operator": "equal", 
      "match_all": true, 
      "key": "selector"
    }]
  }, 
  {
    "keys": [
      "ctrl+shift+period"
    ], 
    "args": {
      "action": "select_next_item"
    }, 
    "command": "run_zen_action", 
    "context": [{
      "operand": "text.html, source.css, text.xml", 
      "operator": "equal", 
      "match_all": true, 
      "key": "selector"
    }]
  }, 

  {
    "keys": [
      "ctrl+shift+comma"
    ], 
    "args": {
      "action": "select_previous_item"
    }, 
    "command": "run_zen_action", 
    "context": [{
      "operand": "text.html, source.css, text.xml", 
      "operator": "equal", 
      "match_all": true, 
      "key": "selector"
    }]
  }, 

  {
    "keys": [
      "ctrl+shift+j"
    ], 
    "doc": "Splits or joins tag, e.g. transforms it into a short notation and vice versa:\n<div></div> \u2192 <div /> : join\n<div /> \u2192 <div></div> : split\n\n\n@param profile_name: Profile name\n@type profile_name: str", 
    "args": {
      "action": "split_join_tag", 
      "profile_name": null
    }, 
    "command": "run_zen_action", 
    "context": [{
      "operand": "text.html, text.xml", 
      "operator": "equal", 
      "match_all": true, 
      "key": "selector"
    }]
  }, 

  {
    "keys": [
      "ctrl+alt+/"
    ], 
    "doc": "Toggle comment on current editor's selection or HTML tag/CSS rule", 
    "args": {
      "action": "toggle_comment"
    }, 
    "command": "run_zen_action", 
    "context": [{
      "operand": "text.html, source.css, text.xml", 
      "operator": "equal", 
      "match_all": true, 
      "key": "selector"
    }]
  }, 

  {
    "keys": [
      "ctrl+alt+shift+m"
    ], 
    "doc": "Update image size: reads image from image/CSS rule under caret\nand updates dimensions inside tag/rule", 
    "args": {
      "action": "update_image_size"
    }, 
    "command": "run_zen_action", 
    "context": [{
      "operand": "text.html, source.css, text.xml", 
      "operator": "equal", 
      "match_all": true, 
      "key": "selector"
    }]
  }, 
  {
    "keys": [
      "ctrl+shift+w"
    ], 
    // TODO
    "doc": "Wraps content with abbreviation\n\n\n@param syntax: Syntax type (html, css, etc.)\n@type syntax: str\n@param profile_name: Output profile name (html, xml, xhtml)\n@type profile_name: str", 

    "args": {
      "action": "wrap_with_abbreviation", 
      "profile_name": null, 
      "abbr": null, 
      "syntax": null
    }, 

    "command": "run_zen_action", 

    "context": [{
      "operand": "text.html, source.css, text.xml", 
      "operator": "equal", 
      "match_all": true, 
      "key": "selector"
    }]
  },
  {
    "args": {
      "contents": " id=\"$1\""
    }, 
    "command": "insert_snippet", 
    "context": [
      {
        "key": "selector", 
        "match_all": true, 
        "operand": "text.html meta.tag -string -punctuation.definition.tag.begin.html -meta.scope.between-tag-pair.html", 
        "operator": "equal"
      }
    ], 
    "keys": [
      "#"
    ]
  }, 
  {
    "args": {
      "contents": " class=\"$1\""
    }, 
    "command": "insert_snippet", 
    "context": [
      {
        "key": "selector", 
        "match_all": true, 
        "operand": "text.html meta.tag -string -punctuation.definition.tag.begin.html -meta.scope.between-tag-pair.html", 
        "operator": "equal"
      }
    ], 
    "keys": [
      "."
    ]
  }, 
  {
    "args": {
      "contents": "id=\"$1\""
    }, 
    "command": "insert_snippet", 
    "context": [
      {
        "key": "selector", 
        "match_all": true, 
        "operand": "text.html meta.tag -string -punctuation.definition.tag.begin.html -meta.scope.between-tag-pair.html", 
        "operator": "equal"
      }, 
      {
        "key": "preceding_text", 
        "match_all": true,
        "operand": "\\s$", 
        "operator": "regex_contains"
      }
    ], 
    "keys": [
      "#"
    ]
  }, 
  {
    "args": {
      "contents": "class=\"$1\""
    }, 
    "command": "insert_snippet", 
    "context": [
      {
        "key": "selector", 
        "match_all": true, 
        "operand": "text.html meta.tag -string -punctuation.definition.tag.begin.html -meta.scope.between-tag-pair.html", 
        "operator": "equal"
      }, 
      {
        "key": "preceding_text", 
        "match_all": true, 
        "operand": "\\s$", 
        "operator": "regex_contains"
      }
    ], 
    "keys": [
      "."
    ]
  }
]